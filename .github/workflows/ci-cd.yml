name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fitrecipes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Run TypeScript check
        run: bun run type-check

      - name: Run format check
        run: bun run format:check

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Run tests
        run: bun run test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fitrecipes_test?schema=public
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          SUPABASE_STORAGE_BUCKET: test-bucket

  build:
    runs-on: ubuntu-latest
    name: Build & Security
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Build application
        run: bun run build

      - name: Build Docker image
        run: docker build -t fitrecipes-backend .

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  deploy:
    runs-on: ubuntu-latest
    name: Safe Deploy to Render
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-Deployment Status
        run: |
          echo "‚úÖ All CI/CD checks passed!"
          echo "ÔøΩÔ∏è Initiating CONTROLLED deployment to Render"
          echo "üìù Commit: ${{ github.event.head_commit.message }}"
          echo "üë§ Author: ${{ github.event.head_commit.author.name }}"
          echo "üîó Repository: ${{ github.repository }}"
          echo "‚è∞ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Deploy to Render (Controlled)
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          if [ -z "$RENDER_SERVICE_ID" ] || [ -z "$RENDER_API_KEY" ]; then
            echo "‚ö†Ô∏è  RENDER_SERVICE_ID or RENDER_API_KEY secrets not set"
            echo "üìù Please add Render API credentials to GitHub secrets:"
            echo "   1. Go to Render Dashboard ‚Üí Account Settings ‚Üí API Keys"
            echo "   2. Create API key and copy it"
            echo "   3. Find service ID from URL: srv-xxxxx"
            echo "   4. Add both as GitHub secrets"
            echo ""
            echo "üîÑ Falling back to monitoring existing deployment..."
            echo "‚ÑπÔ∏è  Render auto-deploy may still be active"
          else
            echo "üöÄ Triggering controlled deployment via Render API..."
            
            # Trigger deployment via Render API
            echo "üîç Testing API credentials first..."
            
            # Test API access
            TEST_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID" || echo "failed")
            
            if echo "$TEST_RESPONSE" | grep -q "name"; then
              echo "‚úÖ API credentials valid"
              
              # Trigger deployment with correct payload
              DEPLOY_RESPONSE=$(curl -s -X POST \
                "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
                -H "Authorization: Bearer $RENDER_API_KEY" \
                -H "Content-Type: application/json" \
                --data-raw '{}' || echo "failed")
            else
              echo "‚ùå API credentials invalid or service not found"
              echo "üìä Test Response: $TEST_RESPONSE"
              DEPLOY_RESPONSE="failed"
            fi
            
            if echo "$DEPLOY_RESPONSE" | grep -q "id"; then
              # Extract key information from response
              DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 | head -1)
              COMMIT_ID=$(echo "$DEPLOY_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 | tail -1)
              STATUS=$(echo "$DEPLOY_RESPONSE" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
              CREATED_AT=$(echo "$DEPLOY_RESPONSE" | grep -o '"createdAt":"[^"]*"' | cut -d'"' -f4)
              
              echo "‚úÖ Deployment triggered successfully!"
              echo "=================================="
              echo "üÜî Deploy ID: $DEPLOY_ID"
              echo "ÔøΩ Commit: ${COMMIT_ID:0:8}"
              echo "ÔøΩüìä Status: $STATUS"
              echo "‚è∞ Started: $CREATED_AT"
              echo "üîó Monitor: https://dashboard.render.com/web/$RENDER_SERVICE_ID"
              echo "=================================="
            elif [ "$DEPLOY_RESPONSE" = "failed" ]; then
              echo "‚ùå Deployment API Call Failed"
              echo "=============================="
              echo "üîç Check your GitHub secrets:"
              echo "   ‚Ä¢ RENDER_SERVICE_ID (srv-xxxxx...)"
              echo "   ‚Ä¢ RENDER_API_KEY (rnd_xxxxx...)"
              echo "ÔøΩ Go to: Settings ‚Üí Secrets ‚Üí Actions"
              echo "=============================="
            else
              echo "‚ö†Ô∏è  Unexpected Deployment Response"
              echo "=================================="
              echo "üìä Raw Response:"
              echo "$DEPLOY_RESPONSE" | sed 's/,/,\n   /g' | sed 's/{/{\n   /' | sed 's/}/\n}/'
              echo ""
              echo "üîç Possible causes:"
              echo "   ‚Ä¢ API format changes"
              echo "   ‚Ä¢ Service temporarily unavailable"
              echo "   ‚Ä¢ Network connectivity issues"
              echo "üîÑ Continuing with verification..."
              echo "=================================="
            fi
          fi

      - name: Verify Deployment Health
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          echo "üè• Verifying deployment completion via health checks..."
          
          # Configure health check parameters
          MAX_ATTEMPTS=30
          WAIT_TIME=10
          
          if [ -z "$RENDER_APP_URL" ]; then
            echo "‚ö†Ô∏è  RENDER_APP_URL secret not set"
            echo "üìù Please add your Render app URL to GitHub secrets"
            echo "üîó Format: https://your-app-name.onrender.com"
            echo "‚ÑπÔ∏è  Skipping automated health checks for now"
            exit 0
          fi
          
          HEALTH_URL="$RENDER_APP_URL/health"
          
          echo "üéØ Health check URL: $HEALTH_URL"
          echo "‚è±Ô∏è  Max attempts: $MAX_ATTEMPTS (${MAX_ATTEMPTS}0 seconds timeout)"
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "üîÑ Attempt $i/$MAX_ATTEMPTS..."
            
            if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              echo "üéâ Deployment verified successfully"
              break
            else
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
                echo "üö® Deployment might have issues"
                exit 1
              else
                echo "‚è≥ Service not ready yet, waiting ${WAIT_TIME}s..."
                sleep $WAIT_TIME
              fi
            fi
          done

      - name: Verify API Endpoints
        if: success()
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          if [ -z "$RENDER_APP_URL" ]; then
            echo "‚ö†Ô∏è  Skipping API verification - RENDER_APP_URL not set"
            exit 0
          fi
          
          BASE_URL="$RENDER_APP_URL"
          
          echo "üß™ Testing API endpoints..."
          
          # Test health endpoint and extract response
          echo "üìç Testing /health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$BASE_URL/health" || echo "failed")
          
          if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
            echo "‚úÖ Health endpoint working"
            echo "üìä Response: $HEALTH_RESPONSE"
          else
            echo "‚ùå Health endpoint failed"
            echo "üìä Response: $HEALTH_RESPONSE"
          fi
          
          # Test API base endpoint
          echo "üìç Testing /api/v1 endpoint..."
          API_RESPONSE=$(curl -s -w "%{http_code}" "$BASE_URL/api/v1" || echo "failed")
          
          if [[ "$API_RESPONSE" == *"200"* ]] || [[ "$API_RESPONSE" == *"404"* ]]; then
            echo "‚úÖ API endpoint accessible"
          else
            echo "‚ö†Ô∏è  API endpoint response: $API_RESPONSE"
          fi

      - name: Deployment Summary
        if: always()
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo "üîó Repository: ${{ github.repository }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üë§ Author: ${{ github.event.head_commit.author.name }}"
          echo "üí¨ Message: ${{ github.event.head_commit.message }}"
          echo "‚è∞ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          if [ -n "$RENDER_APP_URL" ]; then
            echo "üöÄ App URL: $RENDER_APP_URL"
            echo "üè• Health: $RENDER_APP_URL/health"
            echo "üîó API: $RENDER_APP_URL/api/v1"
          else
            echo "‚ö†Ô∏è  Add RENDER_APP_URL secret for automated verification"
          fi

      - name: Deployment Failure Handler
        if: failure()
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          echo "üö® CONTROLLED DEPLOYMENT FAILED"
          echo "==============================="
          echo "‚ùå The controlled deployment process failed"
          echo "üõ°Ô∏è Production is PROTECTED - no broken code deployed"
          echo ""
          echo "üîç Troubleshooting steps:"
          echo "1. Check the logs above for specific errors"
          echo "2. Verify GitHub secrets are correctly set:"
          echo "   - RENDER_SERVICE_ID"
          echo "   - RENDER_API_KEY" 
          echo "   - RENDER_APP_URL"
          echo "3. Check Render service status: https://dashboard.render.com"
          echo "4. Review service logs in Render dashboard"
          echo ""
          if [ -n "$RENDER_APP_URL" ]; then
            echo "üåê App URL: $RENDER_APP_URL"
            echo "üè• Health Check: $RENDER_APP_URL/health"
          fi
          echo ""
          echo "‚úÖ BENEFIT: Failed deployment was caught before affecting users!"

      - name: Success Notification
        if: success()
        env:
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "========================"
          echo "‚úÖ Quality Gates: PASSED"
          echo "‚úÖ Build & Deploy: COMPLETED"
          echo "‚úÖ Health Checks: VERIFIED"
          echo "‚úÖ Production: UPDATED & SAFE"
          echo ""
          echo "üåê Your FitRecipes Backend is LIVE!"
          echo "========================"
          if [ -n "$RENDER_APP_URL" ]; then
            echo "üîó App URL: $RENDER_APP_URL"
            echo "üè• Health: $RENDER_APP_URL/health"
            echo "ÔøΩ API: $RENDER_APP_URL/api/v1"
          else
            echo "üí° Add RENDER_APP_URL secret for direct links"
          fi
          echo "========================"