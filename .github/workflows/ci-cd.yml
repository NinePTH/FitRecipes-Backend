name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fitrecipes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Run format check
        run: bun run format:check

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Run tests
        run: bun run test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fitrecipes_test?schema=public
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          SUPABASE_STORAGE_BUCKET: test-bucket

  build:
    runs-on: ubuntu-latest
    name: Build & Security
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Build application
        run: bun run build

      - name: Build Docker image
        run: docker build -t fitrecipes-backend .

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Status
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment Status
        run: |
          echo "‚úÖ All checks passed!"
          echo "üöÄ Ready for deployment to Render"
          echo "üìù Commit: ${{ github.event.head_commit.message }}"
          echo "üë§ Author: ${{ github.event.head_commit.author.name }}"
          echo "üîó Repository: ${{ github.repository }}"
          echo ""
          echo "Manual deployment steps:"
          echo "1. Go to your Render dashboard"
          echo "2. Your service will auto-deploy from this push"
          echo "3. Monitor the deployment logs"